heat_template_version: 2016-10-14

description: >
  This template configure a lab to train oneself with RHCE certification 
parameters:

  # GENERIC
  
  image_name:
    type: string
    label: Image
    description: OS image to use
    default: centos
    
  key_name:
    type: string
    label: SSHkey
    description: SSH key to push in vms
    default: mykey
    
  volume_size:
    type: number
    label: Volume size
    description: Generic VMs volume size
    default: 20
    
  tenant_network:
    type: string
    label: Tenant network
    description: Tenant network name
    
  external_network:
    type: string
    label: External network
    description: External network name
    
  # IPA Specific
  
  IPA_flavor:
    type: string
    label: IPA Server Flavor
    description: Flavor for ipa server
    default: m1.small

  # A Server Specific
  
  A_flavor:
    type: string
    label: A Server Flavor
    description: Flavor for A server
    default: m1.small

  # B Server Specific

  B_flavor:
    type: string
    label: B Server Flavor
    description: Flavor for B server
    default: m1.small

  # AWX Server Specific

  AWX_flavor:
    type: string
    label: Awx Flavor
    description: Flavor for AWX server
    default: m1.small
  
  ssh_allowed_cidr:
    type: string
    label: Private CIDR allowed
    description: Private CIDR allowed to use SSH Connection
    default: 192.168.100.0/24

# User password
# If you want random password use OS::Heat::RandomString resource

  root_pwd:
    type: string
    label: Root Password
    description: Root password

resources:

# SECURITY GROUP DEFINITION

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Tenant security group
      name: tenant_scrt_grp
      rules:
        - { remote_ip_prefix: 0.0.0.0/0, direction: ingress, protocol: tcp, port_range_min: 80, port_range_max: 80 }
        - { remote_ip_prefix: 0.0.0.0/0, direction: ingress, protocol: tcp, port_range_min: 22, port_range_max: 22 }
        - { remote_ip_prefix: 0.0.0.0/0, direction: ingress, protocol: icmp }

# IPA RESOURCES

  IPA_srv:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: IPA_flavor }
      name: srvIPA
      image: { get_param: image_name }
      key_name: { get_param: key_name }
      networks:
        - network: private_network
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "[*] CONFIGURE SSH ROOT LOGIN WITH PASSWORD"
            echo "sshd: All" >> /etc/hosts.deny
            echo "sshd: $ALLOWED_CIDR" >> /etc/hosts.allow
            sed -i s/"#PermitRootLogin yes"/"PermitRootLogin yes"/g /etc/ssh/sshd_config
            sed -i s/"PasswordAuthentication no"/"PasswordAuthentication yes"/g /etc/ssh/sshd_config
            sed -i 's/GSSAPICleanupCredentials yes/GSSAPICleanupCredentials no/g' /etc/ssh/sshd_config
            systemctl restart sshd
            echo $ROOT_PWD | passwd --stdin root
          params:
            $ALLOWED_CIDR: {get_param: ssh_allowed_cidr }
            $ROOT_PWD: {get_param: root_pwd }

# A SERVER RESOURCES
      
  A_srv:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: A_flavor }
      name: srvA
      image: { get_param: image_name }
      key_name: { get_param: key_name }
      networks:
        - network: private_network
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "[*] CONFIGURE SSH ROOT LOGIN WITH PASSWORD"
            echo "sshd: All" >> /etc/hosts.deny
            echo "sshd: $ALLOWED_CIDR" >> /etc/hosts.allow
            sed -i s/"#PermitRootLogin yes"/"PermitRootLogin yes"/g /etc/ssh/sshd_config
            sed -i s/"PasswordAuthentication no"/"PasswordAuthentication yes"/g /etc/ssh/sshd_config
            sed -i 's/GSSAPICleanupCredentials yes/GSSAPICleanupCredentials no/g' /etc/ssh/sshd_config
            systemctl restart sshd
            echo $ROOT_PWD | passwd --stdin root
          params:
            $ALLOWED_CIDR: {get_param: ssh_allowed_cidr }
            $ROOT_PWD: {get_param: root_pwd }

# B SERVER RESOURCES
  
  B_srv:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: B_flavor }
      name: srvB
      image: { get_param: image_name }
      key_name: { get_param: key_name }
      networks:
        - network: private_network
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "[*] CONFIGURE SSH ROOT LOGIN WITH PASSWORD"
            echo "sshd: All" >> /etc/hosts.deny
            echo "sshd: $ALLOWED_CIDR" >> /etc/hosts.allow
            sed -i s/"#PermitRootLogin yes"/"PermitRootLogin yes"/g /etc/ssh/sshd_config
            sed -i s/"PasswordAuthentication no"/"PasswordAuthentication yes"/g /etc/ssh/sshd_config
            sed -i 's/GSSAPICleanupCredentials yes/GSSAPICleanupCredentials no/g' /etc/ssh/sshd_config
            systemctl restart sshd
            echo $ROOT_PWD | passwd --stdin root
          params:
            $ALLOWED_CIDR: {get_param: ssh_allowed_cidr }
            $ROOT_PWD: {get_param: root_pwd }

# AWX SERVER RESOURCES

  awx_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: tenant_network }
    
  AWX_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: awx_port }
      
  AWX_srv:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: AWX_flavor }
      name: srvAWX
      image: { get_param: image_name }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: awx_port }
      user_data: |
        #!/bin/bash
        echo "[*] INSTALLING AWX ON DOCKER"
        yum install -y epel-release
        yum install -y yum-utils device-mapper-persistent-data lvm2 ansible git python-devel python-pip python-docker-py vim-enhanced
        yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        yum install docker-ce -y
        sleep 5
        systemctl start docker
        systemctl enable docker
        cd /tmp
        git clone https://github.com/ansible/awx.git
        sleep 5
        cd /tmp/awx
        git clone https://github.com/ansible/awx-logos.git
        sleep 5
        ansible-playbook -i /tmp/awx/installer/inventory /tmp/awx/installer/install.yml